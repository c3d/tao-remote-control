// *****************************************************************************
// remote_control.tbl                                              Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code for
//     the "RemoteControl" module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2012, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

#include "remote_control.h"
#include "hook.h"

PREFIX(RemoteControlHook,  tree, "rc_hook",
       PARM(id, integer, "Hook identifier")
       PARM(port, integer, "TCP port (listen)"),
       return remoteControlHook(context, self, id, port),
       SYNOPSIS("Execute commands sent from a remote client, in the current "
                "context. A server is started on the specified port if not "
                "already running. The identifier is used to dispatch commands "
                "when several hooks are used."))
PREFIX(RemoteControlWriteln,  tree, "rc_writeln",
       PARM(id, integer, "Hook identifier")
       PARM(msg, text, "The message to send to the client"),
       return remoteControlWriteln(self, id, msg, false),
       SYNOPSIS("Send a message to the clients that are currently connected "
                "to the specified hook."))

// Exported, but not documented

PREFIX(RemoteControlWritelnOnce,  tree, "rc_writeln_once",
       PARM(id, integer, "Hook identifier")
       PARM(msg, text, "The message to send to the client"),
       return remoteControlWriteln(self, id, msg, true),
       SYNOPSIS("Send a message to the clients that are currently connected "
                "to the specified hook. Message is sent only once, until the "
                "document is reloaded."))

PREFIX(Eval, tree, "eval",
       PARM(code, text, "Code to execute"),
       return Hook::eval(context, self, code),
       SYNOPSIS("Execute XL code passed as text. Code is compiled on first "
                "call, and cached."))
PREFIX(EvalOnce, tree, "eval_once",
       PARM(code, text, "Code to execute"),
       return Hook::evalOnce(context, self, code),
       SYNOPSIS("Execute XL code passed as text once. code is executed the "
                "first time the primitive is called, or the source text "
                "is different from the previous call, or the document is "
                "reloaded."))
