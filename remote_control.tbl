// ****************************************************************************
//  remote_control.tbl                                             Tao project
// ****************************************************************************
//
//   File Description:
//
//     Definition of the interface between XLR and native code for
//     the "RemoteControl" module.
//
//
//
//
//
//
//
// ****************************************************************************
// This software is property of Taodyne SAS - Confidential
// Ce logiciel est la propriété de Taodyne SAS - Confidentiel
//  (C) 2012 Christophe de Dinechin
//  (C) 2012 Taodyne SAS
// ****************************************************************************

#include "remote_control.h"
#include "hook.h"

PREFIX(RemoteControlHook,  tree, "remote_control_hook",
       PARM(id, integer, "Hook identifier")
       PARM(port, integer, "TCP port (listen)"),
       return remoteControlHook(context, self, id, port),
       SYNOPSIS("Execute commands sent from a remote client, in the current "
                "context. A server is started on the specified port if not "
                "already running. The identifier is used to dispatch commands "
                "when several hooks are used."))
PREFIX(RemoteControlWriteln,  tree, "remote_control_writeln",
       PARM(id, integer, "Hook identifier")
       PARM(msg, text, "The message to send to the client"),
       return remoteControlWriteln(self, id, msg, false),
       SYNOPSIS("Send a message to the clients that are currently connected "
                "to the specified hook."))
PREFIX(RemoteControlWritelnOnce,  tree, "remote_control_writeln_once",
       PARM(id, integer, "Hook identifier")
       PARM(msg, text, "The message to send to the client"),
       return remoteControlWriteln(self, id, msg, true),
       SYNOPSIS("Send a message to the clients that are currently connected "
                "to the specified hook. Message is sent only once, until the "
                "document is reloaded."))

// Exported, but not documented
PREFIX(Eval, tree, "eval",
       PARM(code, text, "Code to execute"),
       return Hook::eval(context, self, code),
       SYNOPSIS("Execute XL code passed as text. Code is compiled on first "
                "call, and cached."))
PREFIX(EvalOnce, tree, "eval_once",
       PARM(code, text, "Code to execute"),
       return Hook::evalOnce(context, self, code),
       SYNOPSIS("Execute XL code passed as text once. code is executed the "
                "first time the primitive is called, or the source text "
                "is different from the previous call, or the document is "
                "reloaded."))
